<!DOCTYPE html>
<html lang="eng">
<head>
<!--load an icon library to sjow a hamburger menu(bars) on small screens
to use icons, just add a link to the icon library the <head> section of your html page. No downloads or installatiobs is required
we place font awesome icons by using the prefix fa and the icon's name    -->
<link rel="stylesheet" 
href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<meta charset='utf8'>
<meta name='viewport' content='width=device-width, initial-scale= 1.0'>
<style>
/* style the navigation menu*/
.menu1{
    overflow: hidden;
    background-color:rgb(167, 167, 167);
    position: relative;
}
/*hide the links inside the navigation menu*/
.menu1 #menu2 {
    display:none;
    color: black;
}
.menu1 #menu2 a {
  color: black;
}
/*style navigation menu links*/
.menu1 a{
text-transform: capitalize;    
text-decoration: none;
color:white;
font-family: Georgia, 'Times New Roman', Times, serif;
font-size: 17px;
display: block;
padding: 14px 16px;
}

/*style the hamburger menu*/
.menu1 a.icon {
    
    background: rgb(1, 1, 1);
    display:block;
    float: left;
    position: absolute;
    left:0%;
    top:0%;
}
.hamburger {
  display: inline-block;
  cursor: pointer;
  padding: 10px 15px;
  margin: 10px;
}

/* add a grey background color on the mouse-over */
.menu1 a:hover{
    background-color: orange;
    color: black;
}

ul.heading {
    list-style-type: none;
    margin: 0;
    padding:0;
    overflow: hidden;
    background-color: orange;
}
li.list a {
    float: left;
}
li.list a {
    display : block;
    color: black;
    text-align : center;
    padding : 16px;
    text-decoration : none;
    font-family:Georgia, 'Times New Roman', Times, serif;
    font-size:x-large;
    
}
li.list a:hover {
    background-color: white;

}
.topics a {
    color: black;
    text-decoration: none;
}

.topichead h1,h2{
text-decoration: none;
text-transform:capitalize ;
color:rgb(16, 16, 15);  
}

.topics a :hover{
    color:orange;

}

p,ul,b {
    font-family:Georgia, 'Times New Roman', Times, serif;
    font-size:large;
}

table, th, td {
    border:1px solid black;
    border-collapse: collapse;

}

table.center{
    margin-left: auto;
    margin-right: auto;
}

table th,td{
    padding: 50px;
    margin: 5px;
    font-size: large;
}
</style>
<script>
 /* toggle between showing and hidding the navigation menu links when the 
user clicks on the hamburger menu / bar icon */
function myFunction(){
    var x = document.getElementById('menu2');
    if (x.style.display == "block"){
       x.style.display = "none";
    } else {
        x.style.display = "block";
    } 
}
   
</script>
</head>
<title>Git vs Github</title>

<body>
<div class="menu1">    
<!--in this we are gonna see about how to create the hamburger menu HTML part-->
    <div id="menu2">
      <a href="#">.</a>
      <a href="#git home">git home</a>
      <a href="#git intro">git intro</a>
      <a href="#git get start">git get start</a>
      <a href="#git new files">git new files</a>
      <a href="#git staging environment">git stagging environment </a>
      <a href="#git branch">git branch</a>
      <a href="#git help">git help</a>
      <a href="#git branch merge">git branch merge</a>
    </div> 

    <div class="hamburger"> 
    <!--"Hamburger menu" / "bar icon" to toggle the navigation links-->
    <a href="javascript:void(0)" class="icon" onclick="myFunction()">
         <i class="fa fa-bars"></i>
    </a>
    </div>
</div>

<div><ul class="heading">
        <li class="list"><a href="#home">Home</li>
        <li class="list"><a href="#news">News</li> 
        <li class="list"><a href="#contact">contact</li>
        <li class="list"><a href="#about">About</li>   
    </ul>
</div>

<div class="topichead">
   <h1><b>git vs github: difference between git and github</b></h1>
   <h2>table content</h2>

   <div class="topics">    
     <P style="text-transform: capitalize;"><a href="#c1"><b>what is git?</b></a></P>
     <P style="text-transform: capitalize;"><a href="#c2";><b>what is github?</b></a></P>
     <P style="text-transform: capitalize;"><a href="#c3";><b>git and github operate completely differently?</b></a></P>
     <P style="text-transform: capitalize;"><a href="#c2";><b>both git and github handle commands differently?</b></a></P>
   </div>

</div>

<div>
    <h2 id="c1"; style="text-transform: capitalize;">what is git?</h2>
    <p> 
        <b><u>It is a web based Git repository.</u></b> Git is a version control system used for tracking changes in computer files. 
        It is generally used for source code management in software development.
       <ul>
         <li class="a1">Git is used to tracking changes in the source code.</li>
         <li class="a1">The distributed version control tool is used for source code management</li>
         <li class="a1">It allows multiple developers to work together</li>
         <li class="a1">It supports non-linear development through its thousands of parallel branches</li>
       </ul>
    </p>
</div>   
    
<section>
    <h2 id="c2">What Is GitHub?</h2>
    <p>
      It is a web-based Git repository. This hosting service has cloud-based storage. GitHub offers all distributed version control and source code management functionality of Git while adding its own features. 
      It makes it easier to collaborate using Git.</p>
    <p>
    Additionally, GitHub repositories are open to the public. Developers worldwide can interact and contribute to one another’s  
    code, modify or improve it, making GitHub a networking site for web professionals. 
    The process of interaction and contribution is also called social coding.
    </p>
</section>

<section>
    <h2 id="c3">Git and GitHub Operate Completely Differently</h2>
    <p>
        The main Git vs GitHub difference is in their functionality. While they both provide source code management (SCM) and make merging and sharing code easier, this is pretty much where their similarities end. Think of Git as a single computer and GitHub as a network of multiple interconnected computers, all with the same end goal but a wildly different role for how to get there.
    </p>
    <p>
       At its core, Git is a free, open-source software distributed version control system (DVCS) designed to manage all source code history. It can keep a history of commits, can reverse changes, and lets developers share code. Each developer must have Git installed on his or her local device to collaborate. It is commonly referred to as one of the best DevOps tools to understand and use in the developer space, and it’s among the most widely used tools today.
        Companies like Amazon, Facebook, and Microsoft use it, to name a few.
    </p>
    <p>  
      GitHub, on the other hand, is a web-based hosting service for Git repositories. It offers all of Git’s DVCS SCM and has some additional features. This includes collaboration functionality like project management, support ticket management, and bug tracking. With GitHub, developers can share their repositories, access other developers’ repositories, and store remote copies of repositories to serve as backups.
    </p>
</section>

<section>

    <h2 id="c4">Both Git and GitHub Handle Commands Differently</h2>
    <p><!-- the tag <pre> which execute the elememnt inside it obsolutely without no changes. -->
        Git developers themselves perform a command-line tool where code changes like commit and merge within the Git tool on their own local devices. 
        By contrast, GitHub provides its cloud-based graphical interface where these tasks are performed. The interface also offers developers access control, collaboration features, and various task-management tools.
     </p> 
    <p>
        When it comes to commands, Git focuses exclusively on SCM tasks like push and pull, commit, reset, fetch, and merge.
        GitHub, meanwhile, serves as a host for Git repository teams to store their code in a centralized location. While Git is a tool that’s used to manage multiple versions of source code edits that are then transferred to files in a Git repository, GitHub serves as a location for uploading copies of a Git repository.
    </p>
    <p>    
        In a sense, then, there’s no comparison when it comes to Git vs.
        GitHub as far as their function. They complement rather than compete with each other in this space.
    </p> 
</section>

<table class="center">
    <caption style="text-transform:capitalize">gitvsGithub</caption>
    <tr >
        <th>GIT</th>
        <th>Github</th>
    </tr>
    <tr>
        <td>Git is software.</td>
        <td>It is a service.</td>
    </tr>
    <tr>
        <td>Linux maintains Git.</td>
        <td>Microsoft maintains GitHub.</td>
    </tr>
    <tr>
        <td>It is a command-line tool.</td>
        <td>It is a graphical user interface.</td>
    </tr>
    <tr> 
        <td>You can install it locally on the system. </td>
        <td>It is hosted on the web. It is exclusively cloud-based.</td>
    </tr>
    <tr>
        <td>It is a VCS to manage source code history. </td>
        <td>It is a hosting service for Git repositories.</td>
    </tr>
    <tr>
        <td>It focuses on code sharing and version control.</td>
        <td>It focuses on centralized source code hosting.</td>
    </tr>
    <tr>
        <td>It lacks a user management feature.</td>
        <td>It has a built-in user management feature.</td>
    </tr>
    <tr>
        <td>Git was launched in 2005. </td>
        <td>GitHub was released in 2008.</td>
    </tr>
    <tr>
        <td>Git has minimum external tool configuration</td>
        <td>It has an active marketplace for tool integration.</td>
    </tr>
    <tr>
        <td>Its desktop interface is named Git Gui.</td>
        <td>Its desktop interface is named GitHub Desktop.</td>
    </tr>

</table>


</body>
</html>